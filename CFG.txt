PROG → FUNC; PROG | FUNC

FUNC → fn ID(A) { STMTS }

A → ID, A | ID

STMTS → ST; STMTS | ε

ST → ID <- E
  | print E
  | return E
  | if BOOL { STMTS } else { STMTS } 
  | while BOOL { STMTS }
  | for ID <- E, BOOL, INCR { STMTS }
  | INCR

INCR → E++
  | E--
  | E += E
  | E -= E

E → INT
  | ID
  | E + E 
  | E - E
  | E * E
  | E / E
  | E % E
  | BOOL ? E : E
  | ID(EA)

EA → E, EA | E

BOOL → E COMP E

COMP → =
  | !=
  | <
  | >
  | <=
  | >=

ID → [ a-z | A-Z | _ ][ a-z | A-Z | _ | 0-9 ]*

INT → [ 0-9 ]+